declare class FlightPlanManager {
    static DEBUG_INSTANCE: FlightPlanManager;
    private _runwayIndex;
    private _departureRunwayIndex;
    private _departureProcIndex;
    private _departureEnRouteTransitionIndex;
    private _departureDiscontinuity;
    private _arrivalRunwayIndex;
    private _arrivalProcIndex;
    private _arrivalTransitionIndex;
    private _arrivalDiscontinuity;
    private _approachIndex;
    private _approachTransitionIndex;
    private _waypoints;
    private _approachWaypoints;
    private _departureWaypointSize;
    private _arrivalWaypointSize;
    private _atcTimeClimbLLA;
    private _atcTimeClimbExist;
    private _atcTimeApproachLLA;
    private _atcTimeApproachExist;
    private _activeWaypointIndex;
    private _approach;
    private _onFlightPlanUpdateCallbacks;
    private _isDirectTo;
    private _directToTarget;
    private _directToOrigin;
    private _cruisingAltitude;
    onCruisingAltitudeChanged: () => void;
    private _lastIndexBeforeApproach;
    decelWaypoint: WayPoint;
    decelPrevIndex: number;
    instrument: BaseInstrument;
    addHardCodedConstraints(wp: WayPoint): void;
    constructor(_instrument: BaseInstrument);
    private _activeWaypointHasChanged;
    private _lastDistanceToPreviousActiveWaypoint;
    private _isGoingTowardPreviousActiveWaypoint;
    private _planeCoordinates;
    get planeCoordinates(): LatLong;
    update(_deltaTime: number): void;
    private _isRegistered;
    private _isRegisteredAndLoaded;
    private _onCurrentGameFlightLoaded;
    onCurrentGameFlightLoaded(_callback: Function): void;
    private registerListener;
    hasFlightPlan(): boolean;
    private _loadWaypoints;
    updateWaypointIndex(): void;
    private _updateFlightPlanCallback;
    updateFlightPlanByIndex(callback: () => void, index: number, log?: boolean): void;
    asyncUpdateFlightPlanByIndex(index: number, log?: boolean): Promise<void>;
    updateFlightPlan(callback?: () => void, log?: boolean): void;
    asyncUpdateFlightPlan(log?: boolean): Promise<void>;
    updateCurrentApproach(callback?: () => void, log?: boolean): void;
    get cruisingAltitude(): number;
    private _currentFlightPlanIndex;
    getCurrentFlightPlanIndex(): number;
    updateCurrentFlightPlanIndex(callback?: () => void): void;
    asyncUpdateCurrentFlightPlanIndex(): Promise<void>;
    setCurrentFlightPlanIndex(index: number, thenSetActive?: boolean, callback?: (result: boolean) => void): void;
    asyncSetCurrentFlightPlanIndex(index: number, thenSetActive?: boolean): Promise<boolean>;
    activeFlightPlanByIndex(index: number, callback?: () => void): void;
    asyncActiveFlightPlanByIndex(index: number): Promise<void>;
    createNewFlightPlan(callback?: () => void): void;
    createNewFlightPlansUntilIndex(index: number, callback?: () => void): void;
    asyncCreateNewFlightPlansUntilIndex(index: number): Promise<void>;
    copyCurrentFlightPlanInto(index: number, callback?: () => void): void;
    asyncCopyCurrentFlightPlanInto(index: number): Promise<void>;
    copyFlightPlanIntoCurrent(index: number, callback?: () => void): void;
    clearFlightPlan(callback?: () => void): void;
    asyncClearFlightPlan(): Promise<void>;
    clearAllFlightPlans(callback?: () => void): void;
    getOrigin(_addedAsOriginOnly?: boolean): WayPoint;
    setOrigin(icao: string, callback?: () => void, useLocalVars?: boolean): void;
    private _gpsActiveWaypointIdent;
    getActiveWaypointIdent(): string;
    private _gpsActiveWaypointIndex;
    getActiveWaypointIndex(useCorrection?: boolean): number;
    private computeActiveWaypointIndex;
    setActiveWaypointIndex(index: number, callback?: () => void): void;
    recomputeActiveWaypointIndex(callback?: () => void): void;
    getPreviousActiveWaypoint(): WayPoint;
    getActiveWaypoint(useCorrection?: boolean): WayPoint;
    getNextActiveWaypoint(): WayPoint;
    getDistanceToActiveWaypoint(): number;
    getDistanceToDirectToTarget(): number;
    getDistanceToWaypoint(waypoint: WayPoint): number;
    getBearingToActiveWaypoint(_magnetic: boolean): number;
    getBearingToWaypoint(waypoint: WayPoint, _magnetic: boolean): number;
    getETEToActiveWaypoint(): number;
    getETEToWaypoint(waypoint: WayPoint): number;
    getDestination(_addedAsDestinationOnly?: boolean): WayPoint;
    getDeparture(): IDeparture;
    getArrival(): IArrival;
    getAirportApproach(): Approach;
    getDepartureWaypoints(): WayPoint[];
    getDepartureWaypointsMap(): WayPoint[];
    getEnRouteWaypoints(outFPIndex?: number[], useLocalVarForExtremity?: boolean): WayPoint[];
    getEnRouteWaypointsLastIndex(): number;
    getArrivalWaypoints(): WayPoint[];
    getArrivalWaypointsMap(): WayPoint[];
    getWaypointsWithAltitudeConstraints(): WayPoint[];
    setDestination(icao: string, callback?: () => void, useLocalVars?: boolean): void;
    addWaypoint(icao: string, index?: number, callback?: () => void, setActive?: boolean): void;
    asyncAddWaypoint(icao: string, index?: number, setActive?: boolean): Promise<void>;
    addCustomWaypoint(ident: string, index: number, latitude: number, longitude: number, setActive?: boolean, callback?: () => void): void;
    asyncAddCustomWaypoint(ident: string, index: number, latitude: number, longitude: number, setActive?: boolean): Promise<void>;
    setWaypointLatLon(index: number, latitude: number, longitude: number, setActive?: boolean, callback?: () => void): void;
    setWaypointLatLonAlt(index: number, latitude: number, longitude: number, altitude: number, setActive?: boolean, callback?: () => void): void;
    asyncSetWaypointLatLonAlt(index: number, latitude: number, longitude: number, altitude: number, setActive?: boolean): Promise<void>;
    setWaypointAltitude(altitude: number, index: number, callback?: () => void): void;
    asyncSetWaypointAltitude(altitude: number, index: number): Promise<void>;
    setWaypointAdditionalData(index: number, key: string, value: string, callback?: () => void): void;
    getWaypointAdditionalData(index: number, key: Name_Z, callback?: (value: string) => void): void;
    invertActiveFlightPlan(callback?: () => void): void;
    getApproachIfIcao(callback?: (value: string) => void): void;
    addFlightPlanUpdateCallback(_callback: Function): void;
    asyncAddWaypointByIdent(ident: string, index?: number): Promise<void>;
    addWaypointByIdent(ident: string, index?: number, callback?: () => void): void;
    removeWaypoint(index: number, thenSetActive?: boolean, callback?: () => void): void;
    asyncRemoveWaypoint(index: number, thenSetActive?: boolean): Promise<void>;
    removeWaypointFromTo(indexFrom: number, indexTo: number, thenSetActive?: boolean, callback?: () => void): void;
    indexOfWaypoint(waypoint: WayPoint): number;
    getWaypointsCount(flightPlanIndex?: number): number;
    getDepartureWaypointsCount(): number;
    getArrivalWaypointsCount(): number;
    getWaypoint(i: number, flightPlanIndex?: number, considerApproachWaypoints?: boolean): WayPoint;
    getWaypoints(flightPlanIndex?: number): WayPoint[];
    getDepartureRunwayIndex(): number;
    getDepartureRunway(): Runway;
    getDetectedCurrentRunway(): Runway;
    getDepartureProcIndex(): number;
    setDepartureProcIndex(index: number, callback?: () => void): void;
    setDepartureRunwayIndex(index: number, callback?: () => void): void;
    setOriginRunwayIndex(index: number, callback?: () => void): void;
    getAtcTimeClimbLLA(): LatLongAlt;
    getAtcTimeApproachLLA(): LatLongAlt;
    getDepartureEnRouteTransitionIndex(): number;
    setDepartureEnRouteTransitionIndex(index: number, callback?: () => void): void;
    getDepartureDiscontinuity(): boolean;
    clearDepartureDiscontinuity(callback?: () => void): void;
    removeDeparture(callback?: () => void): void;
    getArrivalProcIndex(): number;
    getArrivalTransitionIndex(): number;
    setArrivalProcIndex(index: number, callback?: () => void): void;
    getArrivalDiscontinuity(): boolean;
    clearArrivalDiscontinuity(callback?: () => void): void;
    setArrivalEnRouteTransitionIndex(index: number, callback?: () => void): void;
    getArrivalRunwayIndex(): number;
    setArrivalRunwayIndex(index: number, callback?: () => void): void;
    getApproachIndex(): number;
    setApproachIndex(index: number, callback?: () => void, transition?: number): void;
    private _isLoadedApproach;
    private _isLoadedApproachTimeLastSimVarCall;
    isLoadedApproach(forceSimVarCall?: boolean): boolean;
    private _isActiveApproach;
    private _isActiveApproachTimeLastSimVarCall;
    isActiveApproach(forceSimVarCall?: boolean): boolean;
    activateApproach(callback?: () => void): void;
    deactivateApproach(): void;
    tryAutoActivateApproach(): void;
    getApproachActiveWaypointIndex(): number;
    getApproach(): Approach;
    getApproachTransitionIndex(): number;
    getLastIndexBeforeApproach(): number;
    getApproachRunway(): Runway;
    getApproachWaypoints(): WayPoint[];
    setApproachTransitionIndex(index: number, callback?: () => void): void;
    removeArrival(callback?: () => void): void;
    activateDirectTo(icao: string, callback?: () => void): void;
    activateDirectToFromLatLonAlt(latitude: number, longitude: number, altitude: number, callback?: () => void): void;
    asyncActivateDirectToFromLatLonAlt(latitude: number, longitude: number, altitude: number): Promise<void>;
    cancelDirectTo(callback?: () => void): void;
    getIsDirectTo(): boolean;
    getDirectToTarget(): WayPoint;
    getDirecToOrigin(): LatLongAlt;
    getCoordinatesHeadingAtDistanceAlongFlightPlan(distance: number): {
        lla: LatLong;
        heading: number;
    };
    getCoordinatesAtNMFromDestinationAlongFlightPlan(distance: number): {
        lla: LatLong;
        prevIndex: number;
    };
}
